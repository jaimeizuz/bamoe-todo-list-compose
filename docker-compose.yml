services:
  todolist-kogito-app-service-pgsql-1:
    container_name: todolist-kogito-app-service-pgsql-1
    image: jizuzquiza/kogito-bpmn-processes:1.0.0-SNAPSHOT-pgsql
    profiles:
      - todolist-pgsql
    ports:
      - '8080:8080'
      - '8083:8083'
    cpus: 2
    mem_limit: 768m
    environment:
      KOGITO_PERSISTENCE_PROTO_MARSHALLER: "false"
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      GC_CONTAINER_OPTIONS: "-XX:+UseG1GC"
      # Kogito datasource
      QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:postgresql://todolist-postgres-kogito:5432/kogito'
      QUARKUS_DATASOURCE_USERNAME: kogito-user
      QUARKUS_DATASOURCE_PASSWORD: kogito-pass
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_JDBC_ENABLE_METRICS: "true"
      QUARKUS_DATASOURCE_JDBC_METRICS_ENABLED: "true"
      # Todolist datasource
      QUARKUS_DATASOURCE_TODOLIST_JDBC_URL: 'jdbc:postgresql://todolist-postgres-todolist:5432/todolist'
      QUARKUS_DATASOURCE_TODOLIST_USERNAME: todolist-user
      QUARKUS_DATASOURCE_TODOLIST_PASSWORD: todolist-pass
      QUARKUS_DATASOURCE_TODOLIST_DB_KIND: postgresql
      QUARKUS_DATASOURCE_TODOLIST_JDBC_ENABLE_METRICS: "true"
      QUARKUS_DATASOURCE_TODOLIST_JDBC_METRICS_ENABLED: "true"
      # XA transaction objects datasource
      QUARKUS_DATASOURCE__XOS__JDBC_URL: 'jdbc:postgresql://todolist-postgres-kogito:5432/xa-object-store'
      QUARKUS_DATASOURCE__XOS__USERNAME: kogito-user
      QUARKUS_DATASOURCE__XOS__PASSWORD: kogito-pass
      QUARKUS_DATASOURCE__XOS__DB_KIND: postgresql
      QUARKUS.DATASOURCE__XOS__JDBC_TRANSACTIONS: disabled
      # The initial size of the pool. Usually you will want to set the initial size to match at least the minimal size, 
      # but this is not enforced so to allow for architectures which prefer a lazy initialization of the connections on boot, 
      # while being able to sustain a minimal pool size after boot. DEFAULT: null
      QUARKUS_DATASOURCE_JDBC_INITIAL_SIZE: 20
      # The datasource pool minimum size. DEFAULT: 0
      QUARKUS_DATASOURCE_JDBC_MIN_SIZE: 20
      # The datasource pool maximum size. DEFAULT: 20
      QUARKUS_DATASOURCE_JDBC_MAX_SIZE: 40
      # The interval at which we validate idle connections in the background. Set to 0 to disable background validation. DEFAULT: 2M
      # QUARKUS_DATASOURCE_JDBC_BACKGROUND_VALIDATION_INTERVAL: 2M
      # Perform foreground validation on connections that have been idle for longer than the specified interval. DEFAULT: null
      # QUARKUS_DATASOURCE_JDBC_FOREGROUND_VALIDATION_INTERVAL: 15S
      # The timeout before cancelling the acquisition of a new connection. DEFAULT: 5S
      # QUARKUS_DATASOURCE_JDBC_ACQUISITION_TIMEOUT: 5S
      # The interval at which we check for connection leaks. DEFAULT: disabled
      # QUARKUS_DATASOURCE_JDBC_LEAK_DETECTION_INTERVAL: 10M
      # The interval at which we try to remove idle connections. DEFAULT: 5M
      # QUARKUS_DATASOURCE_JDBC_IDLE_REMOVAL_INTERVAL: 5M
      # The max lifetime of a connection. DEFAULT: disabled
      # QUARKUS_DATASOURCE_JDBC_MAX_LIFETIME: 1M
      # The transaction isolation level. DEFAULT: null
      # QUARKUS_DATASOURCE_JDBC_TRANSACTION_ISOLATION_LEVEL: undefined, none, read-uncommitted, read-committed, repeatable-read, serializable
      QUARKUS_TRANSACTION-MANAGER_ENABLE-RECOVERY: "true"
      QUARKUS_TRANSACTION-MANAGER_OBJECT-STORE_DATASOURCE: "xos"
      QUARKUS_TRANSACTION-MANAGER_OBJECT-STORE_TYPE: "jdbc"
      QUARKUS_TRANSACTION-MANAGER_OBJECT-STORE_CREATE-TABLE: "true"
      KOGITO_SERVICE_URL: 'http://todolist-kogito-app-service-pgsql-1:8080'
      KOGITO_DATA_INDEX_URL: 'http://localhost:8080'
      KOGITO_JOBS_SERVICE_URL: 'http://localhost:8080'
      # The current chunk size in minutes the scheduler handles, it is used to keep a limit number of jobs scheduled
      # in the in-memory scheduler.
      #KOGITO_JOBS-SERVICE_SCHEDULERCHUNKINMINUTES: 10
      # The interval the job loading method runs to fetch the persisted jobs from the repository.
      #KOGITO_JOBS-SERVICE_LOADJOBINTERVALINMINUTES: 10
      # The interval based on the current time the job loading method uses to fetch jobs "FROM (now -
      # {@link #loadJobFromCurrentTimeIntervalInMinutes}) TO {@link #schedulerChunkInMinutes}"
      #KOGITO_JOBS-SERVICE_LOADJOBFROMCURRENTTIMEINTERVALINMINUTES: 0
      # Number of retries configured for the periodic jobs loading procedure. Every time the procedure is started this
      # value is considered.
      KOGITO_JOBS-SERVICE_LOADJOBRETRIES: 3
      # Error strategy to apply when the periodic jobs loading procedure has exceeded the jobLoadReties. NONE, FAIL_SERVICE
      #KOGITO_JOBS-SERVICE_LOADJOBERRORSTRATEGY: FAIL_SERVICE
      KOGITO_JOBS-SERVICE_FORCEEXECUTEEXPIREDJOBS: "true"
      KOGITO_JOBS-SERVICE_FORCEEXECUTEEXPIREDJOBSONSERVICESTART: "true"
      QUARKUS_OTEL_LOGS_ENABLED: "true"
      QUARKUS_OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://todolist-opentelemetry-collector:4317
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://todolist-opentelemetry-collector:4317
      #QUARKUS_MICROMETER_EXPORT_OTLP_URL: http://opentelemetry-collector:4318
      QUARKUS_DATASOURCE_JDBC_TELEMETRY: "true"
      QUARKUS_DATASOURCE_JDBC_TELEMETRY_ENABLED: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING_ENABLED: "true"
      KIE_FLYWAY_ENABLED: "true"
      KOGITO_PROCESSES_TRANSACTIONENABLED: "true"
      KOGITO_USERTASKS_TRANSACTIONENABLED: "true"
      QUARKUS_REST_CLIENT__DUMMY_REST_SERVICE__URL: http://todolist-wiremock-studio:9002
    depends_on:
      todolist-postgres-todolist:
        condition: service_started
      todolist-postgres-kogito:
        condition: service_started
  todolist-kogito-app-service-kafka-1:
    container_name: todolist-kogito-app-service-kafka-1
    image: jizuzquiza/kogito-bpmn-processes:1.0.0-SNAPSHOT-kafka
    profiles:
      - todolist-kafka
    ports:
      - '8080:8080'
      - '8083:8083'
    cpus: 2
    mem_limit: 768m
    environment:
      KOGITO_PERSISTENCE_PROTO_MARSHALLER: "false"
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      GC_CONTAINER_OPTIONS: "-XX:+UseG1GC"
      # Kogito datasource
      QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:postgresql://todolist-postgres-kogito:5432/kogito'
      QUARKUS_DATASOURCE_USERNAME: kogito-user
      QUARKUS_DATASOURCE_PASSWORD: kogito-pass
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_JDBC_ENABLE_METRICS: "true"
      QUARKUS_DATASOURCE_JDBC_METRICS_ENABLED: "true"
      # XA transaction objects datasource
      QUARKUS_DATASOURCE__XOS__JDBC_URL: 'jdbc:postgresql://todolist-postgres-kogito:5432/xa-object-store'
      QUARKUS_DATASOURCE__XOS__USERNAME: kogito-user
      QUARKUS_DATASOURCE__XOS__PASSWORD: kogito-pass
      QUARKUS_DATASOURCE__XOS__DB_KIND: postgresql
      QUARKUS.DATASOURCE__XOS__JDBC_TRANSACTIONS: disabled
      # The initial size of the pool. Usually you will want to set the initial size to match at least the minimal size, 
      # but this is not enforced so to allow for architectures which prefer a lazy initialization of the connections on boot, 
      # while being able to sustain a minimal pool size after boot. DEFAULT: null
      QUARKUS_DATASOURCE_JDBC_INITIAL_SIZE: 20
      # The datasource pool minimum size. DEFAULT: 0
      QUARKUS_DATASOURCE_JDBC_MIN_SIZE: 20
      # The datasource pool maximum size. DEFAULT: 20
      QUARKUS_DATASOURCE_JDBC_MAX_SIZE: 40
      # The interval at which we validate idle connections in the background. Set to 0 to disable background validation. DEFAULT: 2M
      # QUARKUS_DATASOURCE_JDBC_BACKGROUND_VALIDATION_INTERVAL: 2M
      # Perform foreground validation on connections that have been idle for longer than the specified interval. DEFAULT: null
      # QUARKUS_DATASOURCE_JDBC_FOREGROUND_VALIDATION_INTERVAL: 15S
      # The timeout before cancelling the acquisition of a new connection. DEFAULT: 5S
      # QUARKUS_DATASOURCE_JDBC_ACQUISITION_TIMEOUT: 5S
      # The interval at which we check for connection leaks. DEFAULT: disabled
      # QUARKUS_DATASOURCE_JDBC_LEAK_DETECTION_INTERVAL: 10M
      # The interval at which we try to remove idle connections. DEFAULT: 5M
      # QUARKUS_DATASOURCE_JDBC_IDLE_REMOVAL_INTERVAL: 5M
      # The max lifetime of a connection. DEFAULT: disabled
      # QUARKUS_DATASOURCE_JDBC_MAX_LIFETIME: 1M
      # The transaction isolation level. DEFAULT: null
      # QUARKUS_DATASOURCE_JDBC_TRANSACTION_ISOLATION_LEVEL: undefined, none, read-uncommitted, read-committed, repeatable-read, serializable
      KOGITO_SERVICE_URL: 'http://todolist-kogito-app-service-kafka-1:8080'
      KOGITO_DATA_INDEX_URL: 'http://localhost:8080'
      KOGITO_JOBS_SERVICE_URL: 'http://localhost:8080'
      # The current chunk size in minutes the scheduler handles, it is used to keep a limit number of jobs scheduled
      # in the in-memory scheduler.
      #KOGITO_JOBS-SERVICE_SCHEDULERCHUNKINMINUTES: 10
      # The interval the job loading method runs to fetch the persisted jobs from the repository.
      #KOGITO_JOBS-SERVICE_LOADJOBINTERVALINMINUTES: 10
      # The interval based on the current time the job loading method uses to fetch jobs "FROM (now -
      # {@link #loadJobFromCurrentTimeIntervalInMinutes}) TO {@link #schedulerChunkInMinutes}"
      #KOGITO_JOBS-SERVICE_LOADJOBFROMCURRENTTIMEINTERVALINMINUTES: 0
      # Number of retries configured for the periodic jobs loading procedure. Every time the procedure is started this
      # value is considered.
      KOGITO_JOBS-SERVICE_LOADJOBRETRIES: 3
      # Error strategy to apply when the periodic jobs loading procedure has exceeded the jobLoadReties. NONE, FAIL_SERVICE
      #KOGITO_JOBS-SERVICE_LOADJOBERRORSTRATEGY: FAIL_SERVICE
      KOGITO_JOBS-SERVICE_FORCEEXECUTEEXPIREDJOBS: "true"
      KOGITO_JOBS-SERVICE_FORCEEXECUTEEXPIREDJOBSONSERVICESTART: "true"
      QUARKUS_OTEL_LOGS_ENABLED: "true"
      QUARKUS_OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://todolist-opentelemetry-collector:4317
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://todolist-opentelemetry-collector:4317
      #QUARKUS_MICROMETER_EXPORT_OTLP_URL: http://opentelemetry-collector:4318
      QUARKUS_DATASOURCE_JDBC_TELEMETRY: "true"
      QUARKUS_DATASOURCE_JDBC_TELEMETRY_ENABLED: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING_ENABLED: "true"
      KOGITO_EVENTS_GROUPING: "true"
      KIE_FLYWAY_ENABLED: "true"
      KOGITO_PROCESSES_TRANSACTIONENABLED: "true"
      KOGITO_USERTASKS_TRANSACTIONENABLED: "true"
      KAFKA_BOOTSTRAP_SERVERS: redpanda:9093
      MP_MESSAGING_OUTGOING_TODOLIST_TOPIC: todolist
      MP_MESSAGING_OUTGOING_TODOLIST_VALUE_SERIALIZER: io.quarkus.kafka.client.serialization.ObjectMapperSerializer
      QUARKUS_REST_CLIENT__DUMMY_REST_SERVICE__URL: http://todolist-wiremock-studio:9002
    depends_on:
      todolist-postgres-kogito:
        condition: service_started
      todolist-redpanda:
        condition: service_healthy
      todolist-elasticsearch:
        condition: service_started
  todolist-kogito-app-service-elastic-1:
    container_name: todolist-kogito-app-service-elastic-1
    image: jizuzquiza/kogito-bpmn-processes:1.0.0-SNAPSHOT-elastic
    profiles:
      - todolist-elasticsearch
    ports:
      - '8080:8080'
      - '8083:8083'
    cpus: 2
    mem_limit: 768m
    environment:
      KOGITO_PERSISTENCE_PROTO_MARSHALLER: "false"
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      GC_CONTAINER_OPTIONS: "-XX:+UseG1GC"
      # Elasticsearch
      QUARKUS_ELASTICSEARCH_HOSTS: todolist-elasticsearch:9200
      # Kogito datasource
      QUARKUS_DATASOURCE_JDBC_URL: 'jdbc:postgresql://todolist-postgres-kogito:5432/kogito'
      QUARKUS_DATASOURCE_USERNAME: kogito-user
      QUARKUS_DATASOURCE_PASSWORD: kogito-pass
      QUARKUS_DATASOURCE_DB_KIND: postgresql
      QUARKUS_DATASOURCE_JDBC_ENABLE_METRICS: "true"
      QUARKUS_DATASOURCE_JDBC_METRICS_ENABLED: "true"
      # XA transaction objects datasource
      QUARKUS_DATASOURCE__XOS__JDBC_URL: 'jdbc:postgresql://todolist-postgres-kogito:5432/xa-object-store'
      QUARKUS_DATASOURCE__XOS__USERNAME: kogito-user
      QUARKUS_DATASOURCE__XOS__PASSWORD: kogito-pass
      QUARKUS_DATASOURCE__XOS__DB_KIND: postgresql
      QUARKUS.DATASOURCE__XOS__JDBC_TRANSACTIONS: disabled
      # The initial size of the pool. Usually you will want to set the initial size to match at least the minimal size, 
      # but this is not enforced so to allow for architectures which prefer a lazy initialization of the connections on boot, 
      # while being able to sustain a minimal pool size after boot. DEFAULT: null
      QUARKUS_DATASOURCE_JDBC_INITIAL_SIZE: 20
      # The datasource pool minimum size. DEFAULT: 0
      QUARKUS_DATASOURCE_JDBC_MIN_SIZE: 20
      # The datasource pool maximum size. DEFAULT: 20
      QUARKUS_DATASOURCE_JDBC_MAX_SIZE: 40
      # The interval at which we validate idle connections in the background. Set to 0 to disable background validation. DEFAULT: 2M
      # QUARKUS_DATASOURCE_JDBC_BACKGROUND_VALIDATION_INTERVAL: 2M
      # Perform foreground validation on connections that have been idle for longer than the specified interval. DEFAULT: null
      # QUARKUS_DATASOURCE_JDBC_FOREGROUND_VALIDATION_INTERVAL: 15S
      # The timeout before cancelling the acquisition of a new connection. DEFAULT: 5S
      # QUARKUS_DATASOURCE_JDBC_ACQUISITION_TIMEOUT: 5S
      # The interval at which we check for connection leaks. DEFAULT: disabled
      # QUARKUS_DATASOURCE_JDBC_LEAK_DETECTION_INTERVAL: 10M
      # The interval at which we try to remove idle connections. DEFAULT: 5M
      # QUARKUS_DATASOURCE_JDBC_IDLE_REMOVAL_INTERVAL: 5M
      # The max lifetime of a connection. DEFAULT: disabled
      # QUARKUS_DATASOURCE_JDBC_MAX_LIFETIME: 1M
      # The transaction isolation level. DEFAULT: null
      # QUARKUS_DATASOURCE_JDBC_TRANSACTION_ISOLATION_LEVEL: undefined, none, read-uncommitted, read-committed, repeatable-read, serializable
      KOGITO_SERVICE_URL: 'http://todolist-kogito-app-service-elastic-1:8080'
      KOGITO_DATA_INDEX_URL: 'http://localhost:8080'
      KOGITO_JOBS_SERVICE_URL: 'http://localhost:8080'
      # The current chunk size in minutes the scheduler handles, it is used to keep a limit number of jobs scheduled
      # in the in-memory scheduler.
      #KOGITO_JOBS-SERVICE_SCHEDULERCHUNKINMINUTES: 10
      # The interval the job loading method runs to fetch the persisted jobs from the repository.
      #KOGITO_JOBS-SERVICE_LOADJOBINTERVALINMINUTES: 10
      # The interval based on the current time the job loading method uses to fetch jobs "FROM (now -
      # {@link #loadJobFromCurrentTimeIntervalInMinutes}) TO {@link #schedulerChunkInMinutes}"
      #KOGITO_JOBS-SERVICE_LOADJOBFROMCURRENTTIMEINTERVALINMINUTES: 0
      # Number of retries configured for the periodic jobs loading procedure. Every time the procedure is started this
      # value is considered.
      KOGITO_JOBS-SERVICE_LOADJOBRETRIES: 3
      # Error strategy to apply when the periodic jobs loading procedure has exceeded the jobLoadReties. NONE, FAIL_SERVICE
      #KOGITO_JOBS-SERVICE_LOADJOBERRORSTRATEGY: FAIL_SERVICE
      KOGITO_JOBS-SERVICE_FORCEEXECUTEEXPIREDJOBS: "true"
      KOGITO_JOBS-SERVICE_FORCEEXECUTEEXPIREDJOBSONSERVICESTART: "true"
      QUARKUS_OTEL_LOGS_ENABLED: "true"
      QUARKUS_OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: http://todolist-opentelemetry-collector:4317
      QUARKUS_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://todolist-opentelemetry-collector:4317
      #QUARKUS_MICROMETER_EXPORT_OTLP_URL: http://opentelemetry-collector:4318
      QUARKUS_DATASOURCE_JDBC_TELEMETRY: "true"
      QUARKUS_DATASOURCE_JDBC_TELEMETRY_ENABLED: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING: "true"
      QUARKUS_DATASOURCE_JDBC_TRACING_ENABLED: "true"
      KOGITO_EVENTS_GROUPING: "false"
      KIE_FLYWAY_ENABLED: "true"
      KOGITO_PROCESSES_TRANSACTIONENABLED: "true"
      KOGITO_USERTASKS_TRANSACTIONENABLED: "true"
      QUARKUS_REST_CLIENT__DUMMY_REST_SERVICE__URL: http://todolist-wiremock-studio:9002
    depends_on:
      todolist-postgres-kogito:
        condition: service_started
      todolist-elasticsearch:
        condition: service_started
  todolist-rest-service-pgqsql:
    container_name: todolist-rest-service-pgsql
    image: jizuzquiza/todolist-rest-service:1.0.0-SNAPSHOT-pgsql
    profiles:
      - todolist-pgsql
    ports:
      - '8081:8080'
    cpus: 1.5
    mem_limit: 512m
    environment:
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
      GC_CONTAINER_OPTIONS: "-XX:+UseG1GC"
      # Todolist datasource
      QUARKUS_DATASOURCE_TODOLIST_JDBC_URL: 'jdbc:postgresql://todolist-postgres-todolist:5432/todolist'
      QUARKUS_DATASOURCE_TODOLIST_USERNAME: todolist-user
      QUARKUS_DATASOURCE_TODOLIST_PASSWORD: todolist-pass
      QUARKUS_DATASOURCE_TODOLIST_DB_KIND: postgresql
      QUARKUS_DATASOURCE_TODOLIST_JDBC_ENABLE_METRICS: "true"
      QUARKUS_DATASOURCE_TODOLIST_JDBC_METRICS_ENABLED: "true"
    depends_on:
      todolist-postgres-todolist:
        condition: service_started
  todolist-rest-service-elasticsearch:
    container_name: todolist-rest-service-elasticsearch
    image: jizuzquiza/todolist-rest-service:1.0.0-SNAPSHOT-elastic
    profiles:
      - todolist-elasticsearch
    ports:
      - '8081:8080'
    cpus: 1.5
    mem_limit: 512m
    environment:
      GC_CONTAINER_OPTIONS: "-XX:+UseG1GC"
      # Elasticsearch
      QUARKUS_ELASTICSEARCH_HOSTS: todolist-elasticsearch:9200
      QUARKUS_HTTP_CORS_ORIGINS: /.*/
    depends_on:
      todolist-elasticsearch:
        condition: service_started
  todolist-kafka-processor-service:
    container_name: todolist-kafka-processor-service
    image: jizuzquiza/todolist-kafka-processor-service:1.0.0-SNAPSHOT
    profiles:
      - todolist-kafka
    ports:
      - '8082:8080'
    cpus: 1.5
    mem_limit: 512m
    environment:
      GC_CONTAINER_OPTIONS: "-XX:+UseG1GC"
      # Elasticsearch
      QUARKUS_ELASTICSEARCH_HOSTS: todolist-elasticsearch:9200
      KAFKA_BOOTSTRAP_SERVERS: todolist-redpanda:9093
      MP_MESSAGING_INCOMING_TODOLIST_CONNECTOR: smallrye-kafka
    depends_on:
      todolist-elasticsearch:
        condition: service_started
      todolist-redpanda:
        condition: service_healthy
  todolist-kogito-management-console:
    container_name: todolist-kogito-management-console
    image: quay.io/bamoe/management-console:9.2.0-ibm-0004
    cpus: 0.5
    mem_limit: 250m
    profiles:
      - kogito-management-console
    ports:
      - '8280:8080'
    #depends_on:
    #  keycloak:
    #    condition: service_healthy
    environment:
      RUNTIME_TOOLS_MANAGEMENT_CONSOLE_KOGITO_ENV_MODE: "PROD"
      RUNTIME_TOOLS_TASK_CONSOLE_KOGITO_TASK_STATES_LIST: "Active,Ready,Reserved,Completed,Aborted,Skipped"
      RUNTIME_TOOLS_TASK_CONSOLE_KOGITO_TASK_ACTIVE_STATES_LIST: "Active,Ready,Reserved"
  todolist-postgres-kogito:
    container_name: todolist-postgres-kogito
    image: 'postgres:16.8-alpine3.21'
    cpus: 3
    mem_limit: 1024m
    profiles:
      - todolist-pgsql
      - todolist-kafka
      - todolist-elasticsearch
    ports:
      - '5432:5432'
    volumes:
      - './sql/kogito:/docker-entrypoint-initdb.d:Z'
      - './sql/kogito/postgresql.conf:/etc/postgresql.conf'
    command:
      postgres -c config_file=/etc/postgresql.conf
    healthcheck:
      test:
        - CMD
        - pg_isready
        - '-q'
        - '-d'
        - kogito
        - '-U'
        - kogito-user
      timeout: 45s
      interval: 10s
      retries: 50
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
  todolist-postgres-todolist:
    container_name: todolist-postgres-todolist
    image: 'postgres:16.8-alpine3.21'
    cpus: 1.5
    mem_limit: 500m
    profiles:
      - todolist-pgsql
    ports:
      - '5433:5432'
    volumes:
      - './sql/todolist:/docker-entrypoint-initdb.d:Z'
      - './sql/todolist/postgresql.conf:/etc/postgresql.conf'
    command:
      postgres -c config_file=/etc/postgresql.conf
    healthcheck:
      test:
        - CMD
        - pg_isready
        - '-q'
        - '-d'
        - 'todolist'
        - '-U'
        - 'todolist-user'
      timeout: 45s
      interval: 10s
      retries: 50
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
  todolist-postgres-supporting-services:
    container_name: todolist-postgres-supporting-services
    image: 'postgres:16.8-alpine3.21'
    cpus: 1.5
    mem_limit: 500m
    profiles:
      - dashboards
    ports:
      - '5434:5432'
    volumes:
      - './sql/supporting-services:/docker-entrypoint-initdb.d:Z'
      - './sql/supporting-services/postgresql.conf:/etc/postgresql.conf'
    command:
      postgres -c config_file=/etc/postgresql.conf
    healthcheck:
      test:
        - CMD
        - pg_isready
        - '-q'
        - '-d'
        - 'todolist'
        - '-U'
        - 'todolist-user'
      timeout: 45s
      interval: 10s
      retries: 50
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
  todolist-pgadmin:
    image: dpage/pgadmin4:9.1
    container_name: todolist-pgadmin
    cpus: 0.5
    mem_limit: 500m
    profiles:
      - pgadmin
    ports:
      - 8055:80
    volumes:
      - ./pgadmin/servers.json:/pgadmin4/servers.json
      - ./pgadmin/pgpass:/pgadmin4/pgpass
    entrypoint: >
      /bin/sh -c "
      cp -f /pgadmin4/pgpass /var/lib/pgadmin/;
      chmod 600 /var/lib/pgadmin/pgpass;
      /entrypoint.sh
      "
    environment:
      PGADMIN_DEFAULT_EMAIL: user@kogito.org
      PGADMIN_DEFAULT_PASSWORD: pass
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
      GUNICORN_ACCESS_LOGFILE: "/dev/null"
  todolist-redpanda:
    container_name: todolist-redpanda
    image: redpandadata/redpanda:v24.2.14
    cpus: 1.5
    mem_limit: 1500m
    profiles:
      - todolist-kafka
    ports:
      - 18081:18081
      - 18082:18082
      - 14001:8081
      - 14002:8082
      - 9092:9092
      - 28082:28082
      - 29092:2909
      - 9093:9093
      - 9644:9644
    volumes:
      - todolist-redpanda_data:/var/lib/redpanda/data
      #- ./redpanda/bootstrap.yml:/etc/redpanda/.bootstrap.yaml
    #environment:
      #DATA_TRANSFORMS_ENABLED: "true"
    command:
    - redpanda
    - start
    - --smp
    - '6'
    - --reserve-memory
    - 0M
    - --overprovisioned
    - --node-id
    - '0'
    - --kafka-addr
    - PLAINTEXT://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
    - --advertise-kafka-addr
    - PLAINTEXT://todolist-redpanda:9093,OUTSIDE://localhost:9092
    - --pandaproxy-addr
    - PLAINTEXT://0.0.0.0:28082,OUTSIDE://0.0.0.0:8082
    - --advertise-pandaproxy-addr
    - PLAINTEXT://todolist-redpanda:28082,OUTSIDE://localhost:8082
    - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8082/brokers" ]
      interval: 1s
      timeout: 1s
      retries: 50
  todolist-redpanda-console:
    container_name: todolist-redpanda-console
    image: redpandadata/console:v2.8.1
    cpus: 0.5
    mem_limit: 500m
    profiles:
      - todolist-kafka
    # mount the local directory that contains your license key to the container.
    # give Redpanda Console read access to the license.
    volumes:
    # Remove ro?
      - ./license:/etc/redpanda:ro
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml && echo "$$CONSOLE_ROLEBINDINGS_CONFIG_FILE" > /tmp/role-bindings.yml && /app/console'
    environment:
      #REDPANDA_LICENSE_FILEPATH: /etc/redpanda/redpanda.license
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["todolist-redpanda:9093"]
          schemaRegistry:
            enabled: true
            urls: ["http://todolist-redpanda:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://todolist-redpanda:9644"]
        connect:
          enabled: false
          clusters:
            - name: datagen
              url: http://todolist-redpanda-connect:8083
        login:
          enabled: false
          jwtSecret: change-this-to-something-secret
          useSecureCookies: false
          plain:
            enabled: true
            credentials:
            - username: "jdoe"
              password: "jdoe"
            - username: "john"
              password: "some-secret-password"
        enterprise:
          rbac:
            enabled: false
            roleBindingsFilepath: /tmp/role-bindings.yml
      CONSOLE_ROLEBINDINGS_CONFIG_FILE: |
        roleBindings:
        - metadata:
            name: Platform Ops
          subjects:
            - kind: user
              provider: Plain
              name: jdoe
          roleName: admin
        - metadata:
            name: Software Engineers
          subjects:
            - kind: user
              provider: Plain
              name: john
          roleName: editor
    ports:
      - 9001:8080
    depends_on:
      - todolist-redpanda
  todolist-jaeger:
    container_name: todolist-jaeger
    image: jaegertracing/jaeger:2.1.0
    cpus: 0.5
    mem_limit: 500m
    profiles:
      - todolist-pgsql
      - todolist-kafka
      - todolist-elasticsearch
    volumes:
      - './jaeger/jaeger-ui.json:/etc/jaeger/jaeger-ui.json'
    #command: '--query.ui-config /etc/jaeger/jaeger-ui.json'
    environment:
      - METRICS_STORAGE_TYPE=prometheus
      - 'PROMETHEUS_SERVER_URL=http://prometheus:9090'
      - >-
        PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR=${PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR:-true}
      - 'PROMETHEUS_QUERY_NAMESPACE=${PROMETHEUS_QUERY_NAMESPACE:-}'
      - 'PROMETHEUS_QUERY_DURATION_UNIT=${PROMETHEUS_QUERY_DURATION_UNIT:-}'
      - PROMETHEUS_QUERY_NORMALIZE_CALLS=true
      - PROMETHEUS_QUERY_NORMALIZE_DURATION=true
    ports:
      - 16686:16686
      - 14268:14268
      - 14269:14269
      - 14250:14250
      - 5778:5778
      - 9411:9411
  todolist-otel_collector:
    container_name: todolist-opentelemetry-collector
    image: otel/opentelemetry-collector-contrib:0.116.1
    cpus: 1
    mem_limit: 500m
    profiles:
      - todolist-pgsql
      - todolist-kafka
      - todolist-elasticsearch
    volumes:
      - >-
        ./opentelemetry/otel-collector-config.yaml:/etc/otelcol/otel-collector-config.yaml:z
    command: '--config=/etc/otelcol/otel-collector-config.yaml'
    ports:
      - '8889:8889'
      - '13133:13133'
      - '4317:4317'
      - '4318:4318'
      - '15680:55680'
    depends_on:
      - todolist-jaeger
  todolist-prometheus:
    container_name: todolist-prometheus
    image: prom/prometheus:v3.1.0
    cpus: 1
    mem_limit: 500m
    profiles:
      - todolist-pgsql
      - todolist-kafka
      - todolist-elasticsearch
    volumes:
      - './prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:z'
    ports:
      - '19090:9090'
  todolist-grafana:
    container_name: todolist-grafana
    image: grafana/grafana:11.4.0
    profiles:
      - dashboards
    volumes:
      - './grafana/grafana.ini:/etc/grafana/grafana.ini:z'
      - >-
       ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yaml:z
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=todolist-postgres-supporting-services:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana-user
      - GF_DATABASE_PASSWORD=grafana-pass
    ports:
      - '3000:3000'
    depends_on:
      todolist-postgres-supporting-services:
        condition: service_healthy
  todolist-elasticsearch:
    container_name: todolist-elasticsearch
    image: docker.io/elastic/elasticsearch:8.16.2
    cpus: 2
    mem_limit: 1024m
    profiles:
      - todolist-kafka
      - todolist-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"
      discovery.type: "single-node"
      xpack.security.enabled: "false"
      cluster.routing.allocation.disk.threshold_enabled: "false"
  todolist-kibana:
    container_name: todolist-kibana
    image: docker.io/elastic/kibana:8.16.2
    cpus: 2
    mem_limit: 2048m
    environment:
      xpack.monitoring.collection.enabled: "true"
      XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY: d121d3beceec14b5c20ee815cd2c9337
      XPACK_REPORTING_ENCRIPTIONKEY: 3739d02dd358ccb3915cbbd89a6f5150
      XPACK_SECURITY_ENCRIPTIONKEY: 5c4eaf77fdde275944bb1a876a9af87a
    profiles:
      - dashboards
    ports:
      - "5601:5601"
    depends_on:
      - todolist-elasticsearch
  todolist-wiremock-studio:
    container_name: todolist-wiremock-studio
    image: jizuzquiza/wiremock-studio:2.32.0-18
    cpus: 0.5
    mem_limit: 256m
    profiles:
      - todolist-pgsql
      - todolist-kafka
      - todolist-elasticsearch
    volumes:
      - ./wiremock-data-storage:/home/wiremock:z
    ports:
    - 19000-19010:9000-9010
  todolist-bamoe-maven-repository:
    container_name: todolist-bamoe-maven-repository
    image: quay.io/bamoe/maven-repository:9.2.0-ibm-0004
    cpus: 0.5
    mem_limit: 200m
    profiles:
      - bamoe-maven-repository
    ports:
      - '8800:8080'
volumes:
    todolist-redpanda_data: {}
